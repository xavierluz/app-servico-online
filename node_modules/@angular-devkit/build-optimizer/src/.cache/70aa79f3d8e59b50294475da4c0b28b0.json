{"remainingRequest":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\angular-file-uploader\\file-upload.component.js","dependencies":[{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\angular-file-uploader\\file-upload.component.js","mtime":1521465406000},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529519366463},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nexport var FileUploadComponent = /*@__PURE__*/ (function () {\n    function FileUploadComponent() {\n        this.config = {};\n        this.resetUpload = this.config[\"resetUpload\"];\n        this.ApiResponse = new EventEmitter();\n        this.idDate = +new Date();\n        this.reg = /(?:\\.([^.]+))?$/;\n        this.selectedFiles = [];\n        this.notAllowedList = [];\n        this.Caption = [];\n        this.singleFile = true;\n        this.progressBarShow = false;\n        this.uploadBtn = false;\n        this.uploadMsg = false;\n        this.afterUpload = false;\n        this.uploadClick = true;\n        //console.log(\"id: \",this.id);\n        //console.log(\"idDate: \",this.idDate);\n        //console.log(Math.random());\n    }\n    FileUploadComponent.prototype.ngOnChanges = function (rst) {\n        if (rst[\"config\"]) {\n            this.theme = this.config[\"theme\"] || \"\";\n            this.id =\n                this.config[\"id\"] ||\n                    parseInt((this.idDate / 10000).toString().split(\".\")[1]) +\n                        Math.floor(Math.random() * 20) * 10000;\n            this.hideProgressBar = this.config[\"hideProgressBar\"] || false;\n            this.hideResetBtn = this.config[\"hideResetBtn\"] || false;\n            this.hideSelectBtn = this.config[\"hideSelectBtn\"] || false;\n            this.maxSize = this.config[\"maxSize\"] || 20;\n            this.uploadAPI = this.config[\"uploadAPI\"][\"url\"];\n            this.formatsAllowed =\n                this.config[\"formatsAllowed\"] || \".jpg,.png,.pdf,.docx,.txt,.gif,.jpeg\";\n            this.multiple = this.config[\"multiple\"] || false;\n            this.headers = this.config[\"uploadAPI\"][\"headers\"] || {};\n            this.attachPinText = this.config[\"attachPinText\"] || \"Attach supporting documents..\";\n        }\n        if (rst[\"resetUpload\"]) {\n            if (rst[\"resetUpload\"].currentValue === true) {\n                this.resetFileUpload();\n            }\n        }\n    };\n    FileUploadComponent.prototype.ngOnInit = function () {\n        //console.log(\"Id: \", this.id);\n        this.resetUpload = false;\n    };\n    FileUploadComponent.prototype.resetFileUpload = function () {\n        this.selectedFiles = [];\n        this.Caption = [];\n        this.notAllowedList = [];\n        this.uploadMsg = false;\n        this.uploadBtn = false;\n    };\n    FileUploadComponent.prototype.onChange = function (event) {\n        //console.log(this.maxSize + this.formatsAllowed + this.multiple);\n        this.notAllowedList = [];\n        //console.log(\"onchange hit\");\n        if (this.afterUpload || !this.multiple) {\n            this.selectedFiles = [];\n            this.Caption = [];\n            this.afterUpload = false;\n        }\n        //FORMATS ALLOWED LIST\n        //console.log(\"FORMATS ALLOWED LIST= \"+this.formatsAllowed);\n        //NO OF FORMATS ALLOWED\n        var formatsCount;\n        formatsCount = this.formatsAllowed.match(new RegExp(\"\\\\.\", \"g\"));\n        formatsCount = formatsCount.length;\n        //console.log(\"NO OF FORMATS ALLOWED= \"+formatsCount);\n        //console.log(\"-------------------------------\");\n        //ITERATE SELECTED FILES\n        var file;\n        if (event.type == \"drop\") {\n            file = event.dataTransfer.files;\n            console.log(\"type: drop\");\n        }\n        else {\n            file = event.target.files || event.srcElement.files;\n            console.log(\"type: change\");\n        }\n        console.log(file);\n        var currentFileExt;\n        var ext;\n        var frmtAllowed;\n        for (var i = 0; i < file.length; i++) {\n            //CHECK FORMAT\n            //CURRENT FILE EXTENSION\n            currentFileExt = this.reg.exec(file[i].name);\n            currentFileExt = currentFileExt[1];\n            //console.log(file[i].name);\n            frmtAllowed = false;\n            //FORMAT ALLOWED LIST ITERATE\n            for (var j = formatsCount; j > 0; j--) {\n                ext = this.formatsAllowed.split(\".\")[j];\n                //console.log(\"FORMAT LIST (\"+j+\")= \"+ext.split(\",\")[0]);\n                if (j == formatsCount) {\n                    ext = this.formatsAllowed.split(\".\")[j] + \",\";\n                } //check format\n                if (currentFileExt.toLowerCase() == ext.split(\",\")[0]) {\n                    frmtAllowed = true;\n                }\n            }\n            if (frmtAllowed) {\n                //console.log(\"FORMAT ALLOWED\");\n                //CHECK SIZE\n                if (file[i].size > this.maxSize * 1024000) {\n                    //console.log(\"SIZE NOT ALLOWED (\"+file[i].size+\")\");\n                    this.notAllowedList.push({\n                        fileName: file[i].name,\n                        fileSize: this.convertSize(file[i].size),\n                        errorMsg: \"Invalid size\"\n                    });\n                    continue;\n                }\n                else {\n                    //format allowed and size allowed then add file to selectedFile array\n                    this.selectedFiles.push(file[i]);\n                }\n            }\n            else {\n                //console.log(\"FORMAT NOT ALLOWED\");\n                this.notAllowedList.push({\n                    fileName: file[i].name,\n                    fileSize: this.convertSize(file[i].size),\n                    errorMsg: \"Invalid format\"\n                });\n                continue;\n            }\n        }\n        if (this.selectedFiles.length !== 0) {\n            this.uploadBtn = true;\n            if (this.theme == \"attachPin\")\n                this.uploadFiles();\n        }\n        else {\n            this.uploadBtn = false;\n        }\n        this.uploadMsg = false;\n        this.uploadClick = true;\n        this.percentComplete = 0;\n        event.target.value = null;\n    };\n    FileUploadComponent.prototype.uploadFiles = function () {\n        //console.log(this.selectedFiles);\n        var _this = this;\n        var i;\n        this.progressBarShow = true;\n        this.uploadClick = false;\n        this.notAllowedList = [];\n        var isError = false;\n        var xhr = new XMLHttpRequest();\n        var formData = new FormData();\n        for (i = 0; i < this.selectedFiles.length; i++) {\n            if (this.Caption[i] == undefined)\n                this.Caption[i] = \"file\";\n            //Add DATA TO BE SENT\n            formData.append(this.Caption[i], this.selectedFiles[i] /*, this.selectedFiles[i].name*/);\n        }\n        if (i > 1) {\n            this.singleFile = false;\n        }\n        else {\n            this.singleFile = true;\n        }\n        xhr.onreadystatechange = function (evnt) {\n            //console.log(\"onready\");\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    //this.ApiResponse.emit(JSON.parse(xhr.response));\n                    _this.ApiResponse.emit(xhr.response);\n                }\n                else {\n                    //console.log(\"ERRRRRRor\");\n                    //console.log(xhr.statusText + \" (From SERVER)\");\n                    isError = true;\n                    _this.progressBarShow = false;\n                    _this.uploadBtn = false;\n                    _this.uploadMsg = true;\n                    _this.afterUpload = true;\n                    _this.uploadMsgText = \"Upload Failed !\";\n                    _this.uploadMsgClass = \"text-danger lead\";\n                }\n            }\n        };\n        xhr.upload.onprogress = function (evnt) {\n            if (evnt.lengthComputable) {\n                _this.percentComplete = Math.round(evnt.loaded / evnt.total * 100);\n            }\n            //console.log(\"Progress...\"/*+this.percentComplete+\" %\"*/);\n        };\n        xhr.onload = function (evnt) {\n            //console.log(\"onload\");\n            //console.log(evnt);\n            _this.progressBarShow = false;\n            _this.uploadBtn = false;\n            _this.uploadMsg = true;\n            _this.afterUpload = true;\n            if (!isError) {\n                _this.uploadMsgText = \"Successfully Uploaded !\";\n                _this.uploadMsgClass = \"text-success lead\";\n            }\n        };\n        xhr.onerror = function (evnt) {\n            //console.log(\"onerror\");\n            //console.log(evnt);\n        };\n        xhr.open(\"POST\", this.uploadAPI, true);\n        for (var _i = 0, _a = Object.keys(this.headers); _i < _a.length; _i++) {\n            var key = _a[_i];\n            // Object.keys will give an Array of keys\n            xhr.setRequestHeader(key, this.headers[key]);\n        }\n        //let token = sessionStorage.getItem(\"token\");\n        //xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n        //xhr.setRequestHeader('Authorization', `Bearer ${token}`);\n        xhr.send(formData);\n    };\n    FileUploadComponent.prototype.removeFile = function (i, sf_na) {\n        //console.log(\"remove file clicked \" + i)\n        if (sf_na == \"sf\") {\n            this.selectedFiles.splice(i, 1);\n            this.Caption.splice(i, 1);\n        }\n        else {\n            this.notAllowedList.splice(i, 1);\n        }\n        if (this.selectedFiles.length == 0) {\n            this.uploadBtn = false;\n        }\n    };\n    FileUploadComponent.prototype.convertSize = function (fileSize) {\n        //console.log(fileSize + \" - \"+ str);\n        return fileSize < 1024000\n            ? (fileSize / 1024).toFixed(2) + \" KB\"\n            : (fileSize / 1024000).toFixed(2) + \" MB\";\n    };\n    FileUploadComponent.prototype.attachpinOnclick = function () {\n        //console.log(\"ID: \", this.id);\n        document.getElementById(\"sel\" + this.id).click();\n        //$(\"#\"+\"sel\"+this.id).click();\n    };\n    FileUploadComponent.prototype.drop = function (event) {\n        event.stopPropagation();\n        event.preventDefault();\n        console.log(\"drop: \", event);\n        console.log(\"drop: \", event.dataTransfer.files);\n        this.onChange(event);\n    };\n    FileUploadComponent.prototype.allowDrop = function (event) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.dataTransfer.dropEffect = \"copy\";\n        //console.log(\"allowDrop: \",event)\n    };\n    return FileUploadComponent;\n}());\n//# sourceMappingURL=file-upload.component.js.map \n",null]}