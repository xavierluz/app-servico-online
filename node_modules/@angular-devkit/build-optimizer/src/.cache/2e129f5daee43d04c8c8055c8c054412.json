{"remainingRequest":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\angular2-multiselect-dropdown\\multiselect.component.js","dependencies":[{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\angular2-multiselect-dropdown\\multiselect.component.js","mtime":1524404164000},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529519366463},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, NgModule, ChangeDetectorRef, ContentChild, ViewChild, forwardRef, Input, Output, EventEmitter, ElementRef } from '@angular/core';\nimport { FormsModule, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MyException } from './multiselect.model';\nimport { ClickOutsideDirective, ScrollDirective, styleDirective, setPosition } from './clickOutside';\nimport { ListFilterPipe } from './list-filter';\nimport { Item, Badge, Search, TemplateRenderer } from './menu-item';\nexport var DROPDOWN_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return AngularMultiSelect; }),\n    multi: true\n};\nexport var DROPDOWN_CONTROL_VALIDATION = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return AngularMultiSelect; }),\n    multi: true,\n};\nvar noop = function () {\n};\nvar AngularMultiSelect = /*@__PURE__*/ (function () {\n    function AngularMultiSelect(_elementRef, cdr) {\n        this._elementRef = _elementRef;\n        this.cdr = cdr;\n        this.onSelect = new EventEmitter();\n        this.onDeSelect = new EventEmitter();\n        this.onSelectAll = new EventEmitter();\n        this.onDeSelectAll = new EventEmitter();\n        this.onOpen = new EventEmitter();\n        this.onClose = new EventEmitter();\n        this.isActive = false;\n        this.isSelectAll = false;\n        this.chunkIndex = [];\n        this.cachedItems = [];\n        this.itemHeight = 41.6;\n        this.defaultSettings = {\n            singleSelection: false,\n            text: 'Select',\n            enableCheckAll: true,\n            selectAllText: 'Select All',\n            unSelectAllText: 'UnSelect All',\n            enableSearchFilter: false,\n            searchBy: [],\n            maxHeight: 300,\n            badgeShowLimit: 999999999999,\n            classes: '',\n            disabled: false,\n            searchPlaceholderText: 'Search',\n            showCheckbox: true,\n            noDataLabel: 'No Data Available',\n            searchAutofocus: true,\n            lazyLoading: false,\n            labelKey: 'itemName',\n            primaryKey: 'id',\n            position: 'bottom'\n        };\n        this.onTouchedCallback = noop;\n        this.onChangeCallback = noop;\n    }\n    AngularMultiSelect.prototype.ngOnInit = function () {\n        var _this = this;\n        this.settings = Object.assign(this.defaultSettings, this.settings);\n        if (this.settings.groupBy) {\n            this.groupedData = this.transformData(this.data, this.settings.groupBy);\n        }\n        this.totalRows = (this.data && this.data.length);\n        this.cachedItems = this.data;\n        this.screenItemsLen = Math.ceil(this.settings.maxHeight / this.itemHeight);\n        this.cachedItemsLen = this.screenItemsLen * 3;\n        this.totalHeight = this.itemHeight * this.totalRows;\n        this.maxBuffer = this.screenItemsLen * this.itemHeight;\n        this.lastScrolled = 0;\n        this.renderChunk(0, this.cachedItemsLen / 2);\n        if (this.settings.position == 'top') {\n            setTimeout(function () {\n                _this.selectedListHeight = { val: 0 };\n                _this.selectedListHeight.val = _this.selectedListElem.nativeElement.clientHeight;\n            });\n        }\n    };\n    AngularMultiSelect.prototype.ngOnChanges = function (changes) {\n        if (changes.data && !changes.data.firstChange) {\n            if (this.settings.groupBy) {\n                this.groupedData = this.transformData(this.data, this.settings.groupBy);\n                if (this.data.length == 0) {\n                    this.selectedItems = [];\n                }\n            }\n        }\n        if (changes.settings && !changes.settings.firstChange) {\n            this.settings = Object.assign(this.defaultSettings, this.settings);\n        }\n    };\n    AngularMultiSelect.prototype.ngDoCheck = function () {\n        if (this.selectedItems) {\n            if (this.selectedItems.length == 0 || this.data.length == 0 || this.selectedItems.length < this.data.length) {\n                this.isSelectAll = false;\n            }\n        }\n    };\n    AngularMultiSelect.prototype.ngAfterViewInit = function () {\n        if (this.settings.lazyLoading) {\n            this._elementRef.nativeElement.getElementsByClassName(\"lazyContainer\")[0].addEventListener('scroll', this.onScroll.bind(this));\n        }\n    };\n    AngularMultiSelect.prototype.ngAfterViewChecked = function () {\n        if (this.selectedListElem.nativeElement.clientHeight && this.settings.position == 'top' && this.selectedListHeight) {\n            this.selectedListHeight.val = this.selectedListElem.nativeElement.clientHeight;\n            this.cdr.detectChanges();\n        }\n    };\n    AngularMultiSelect.prototype.onItemClick = function (item, index, evt) {\n        if (this.settings.disabled) {\n            return false;\n        }\n        var found = this.isSelected(item);\n        var limit = this.selectedItems.length < this.settings.limitSelection ? true : false;\n        if (!found) {\n            if (this.settings.limitSelection) {\n                if (limit) {\n                    this.addSelected(item);\n                    this.onSelect.emit(item);\n                }\n            }\n            else {\n                this.addSelected(item);\n                this.onSelect.emit(item);\n            }\n        }\n        else {\n            this.removeSelected(item);\n            this.onDeSelect.emit(item);\n        }\n        if (this.isSelectAll || this.data.length > this.selectedItems.length) {\n            this.isSelectAll = false;\n        }\n        if (this.data.length == this.selectedItems.length) {\n            this.isSelectAll = true;\n        }\n    };\n    AngularMultiSelect.prototype.validate = function (c) {\n        return null;\n    };\n    AngularMultiSelect.prototype.writeValue = function (value) {\n        if (value !== undefined && value !== null) {\n            if (this.settings.singleSelection) {\n                try {\n                    if (value.length > 1) {\n                        this.selectedItems = [value[0]];\n                        throw new MyException(404, { \"msg\": \"Single Selection Mode, Selected Items cannot have more than one item.\" });\n                    }\n                    else {\n                        this.selectedItems = value;\n                    }\n                }\n                catch (e) {\n                    console.error(e.body.msg);\n                }\n            }\n            else {\n                if (this.settings.limitSelection) {\n                    this.selectedItems = value.splice(0, this.settings.limitSelection);\n                }\n                else {\n                    this.selectedItems = value;\n                }\n                if (this.selectedItems.length === this.data.length && this.data.length > 0) {\n                    this.isSelectAll = true;\n                }\n            }\n        }\n        else {\n            this.selectedItems = [];\n        }\n    };\n    //From ControlValueAccessor interface\n    AngularMultiSelect.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    //From ControlValueAccessor interface\n    AngularMultiSelect.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    AngularMultiSelect.prototype.trackByFn = function (index, item) {\n        return item[this.settings.primaryKey];\n    };\n    AngularMultiSelect.prototype.isSelected = function (clickedItem) {\n        var _this = this;\n        var found = false;\n        this.selectedItems && this.selectedItems.forEach(function (item) {\n            if (clickedItem[_this.settings.primaryKey] === item[_this.settings.primaryKey]) {\n                found = true;\n            }\n        });\n        return found;\n    };\n    AngularMultiSelect.prototype.addSelected = function (item) {\n        if (this.settings.singleSelection) {\n            this.selectedItems = [];\n            this.selectedItems.push(item);\n            this.closeDropdown();\n        }\n        else\n            this.selectedItems.push(item);\n        this.onChangeCallback(this.selectedItems);\n        this.onTouchedCallback(this.selectedItems);\n    };\n    AngularMultiSelect.prototype.removeSelected = function (clickedItem) {\n        var _this = this;\n        this.selectedItems && this.selectedItems.forEach(function (item) {\n            if (clickedItem[_this.settings.primaryKey] === item[_this.settings.primaryKey]) {\n                _this.selectedItems.splice(_this.selectedItems.indexOf(item), 1);\n            }\n        });\n        this.onChangeCallback(this.selectedItems);\n        this.onTouchedCallback(this.selectedItems);\n    };\n    AngularMultiSelect.prototype.toggleDropdown = function (evt) {\n        var _this = this;\n        if (this.settings.disabled) {\n            return false;\n        }\n        this.isActive = !this.isActive;\n        if (this.isActive) {\n            if (this.settings.searchAutofocus && this.settings.enableSearchFilter && !this.searchTempl) {\n                setTimeout(function () {\n                    _this.searchInput.nativeElement.focus();\n                }, 0);\n            }\n            this.onOpen.emit(true);\n        }\n        else {\n            this.onClose.emit(false);\n        }\n        evt.preventDefault();\n    };\n    AngularMultiSelect.prototype.closeDropdown = function () {\n        if (this.searchInput && this.settings.lazyLoading) {\n            this.searchInput.nativeElement.value = \"\";\n            this.data = [];\n            this.data = this.cachedItems;\n            this.totalHeight = this.itemHeight * this.data.length;\n            this.totalRows = this.data.length;\n            this.updateView(this.scrollTop);\n        }\n        if (this.searchInput) {\n            this.searchInput.nativeElement.value = \"\";\n        }\n        this.filter = \"\";\n        this.isActive = false;\n        this.onClose.emit(false);\n    };\n    AngularMultiSelect.prototype.toggleSelectAll = function () {\n        if (!this.isSelectAll) {\n            this.selectedItems = [];\n            this.selectedItems = this.data.slice();\n            this.isSelectAll = true;\n            this.onChangeCallback(this.selectedItems);\n            this.onTouchedCallback(this.selectedItems);\n            this.onSelectAll.emit(this.selectedItems);\n        }\n        else {\n            this.selectedItems = [];\n            this.isSelectAll = false;\n            this.onChangeCallback(this.selectedItems);\n            this.onTouchedCallback(this.selectedItems);\n            this.onDeSelectAll.emit(this.selectedItems);\n        }\n    };\n    AngularMultiSelect.prototype.transformData = function (arr, field) {\n        var groupedObj = arr.reduce(function (prev, cur) {\n            if (!prev[cur[field]]) {\n                prev[cur[field]] = [cur];\n            }\n            else {\n                prev[cur[field]].push(cur);\n            }\n            return prev;\n        }, {});\n        var tempArr = [];\n        Object.keys(groupedObj).map(function (x) {\n            tempArr.push({ key: x, value: groupedObj[x] });\n        });\n        return tempArr;\n    };\n    AngularMultiSelect.prototype.renderChunk = function (fromPos, howMany) {\n        this.chunkArray = [];\n        this.chunkIndex = [];\n        var finalItem = fromPos + howMany;\n        if (finalItem > this.totalRows)\n            finalItem = this.totalRows;\n        for (var i = fromPos; i < finalItem; i++) {\n            this.chunkIndex.push((i * this.itemHeight) + 'px');\n            this.chunkArray.push(this.data[i]);\n        }\n    };\n    AngularMultiSelect.prototype.onScroll = function (e) {\n        this.scrollTop = e.target.scrollTop;\n        this.updateView(this.scrollTop);\n    };\n    AngularMultiSelect.prototype.updateView = function (scrollTop) {\n        var scrollPos = scrollTop ? scrollTop : 0;\n        var first = (scrollPos / this.itemHeight) - this.screenItemsLen;\n        var firstTemp = \"\" + first;\n        first = parseInt(firstTemp) < 0 ? 0 : parseInt(firstTemp);\n        this.renderChunk(first, this.cachedItemsLen);\n        this.lastRepaintY = scrollPos;\n    };\n    AngularMultiSelect.prototype.filterInfiniteList = function (evt) {\n        var filteredElems = [];\n        this.data = this.cachedItems.slice();\n        if (evt.target.value.toString() != '') {\n            this.data.filter(function (el) {\n                for (var prop in el) {\n                    if (el[prop].toString().toLowerCase().indexOf(evt.target.value.toString().toLowerCase()) >= 0) {\n                        filteredElems.push(el);\n                        break;\n                    }\n                }\n            });\n            //this.cachedItems = this.data;\n            this.totalHeight = this.itemHeight * filteredElems.length;\n            this.totalRows = filteredElems.length;\n            this.data = [];\n            this.data = filteredElems;\n            this.updateView(this.scrollTop);\n        }\n        else if (evt.target.value.toString() == '' && this.cachedItems.length > 0) {\n            this.data = [];\n            this.data = this.cachedItems;\n            this.totalHeight = this.itemHeight * this.data.length;\n            this.totalRows = this.data.length;\n            this.updateView(this.scrollTop);\n        }\n    };\n    return AngularMultiSelect;\n}());\nexport { AngularMultiSelect };\nvar AngularMultiSelectModule = /*@__PURE__*/ (function () {\n    function AngularMultiSelectModule() {\n    }\n    return AngularMultiSelectModule;\n}());\nexport { AngularMultiSelectModule };\n//# sourceMappingURL=multiselect.component.js.map \n",null]}