{"remainingRequest":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\ng2-currency-mask\\src\\input.manager.js","dependencies":[{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\ng2-currency-mask\\src\\input.manager.js","mtime":1521219392000},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529519366463},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar InputManager = /*@__PURE__*/ (function () {\r\n    function InputManager(htmlInputElement) {\r\n        this.htmlInputElement = htmlInputElement;\r\n    }\r\n    InputManager.prototype.setCursorAt = function (position) {\r\n        if (this.htmlInputElement.setSelectionRange) {\r\n            this.htmlInputElement.focus();\r\n            this.htmlInputElement.setSelectionRange(position, position);\r\n        }\r\n        else if (this.htmlInputElement.createTextRange) {\r\n            var textRange = this.htmlInputElement.createTextRange();\r\n            textRange.collapse(true);\r\n            textRange.moveEnd(\"character\", position);\r\n            textRange.moveStart(\"character\", position);\r\n            textRange.select();\r\n        }\r\n    };\r\n    InputManager.prototype.updateValueAndCursor = function (newRawValue, oldLength, selectionStart) {\r\n        this.rawValue = newRawValue;\r\n        var newLength = newRawValue.length;\r\n        selectionStart = selectionStart - (oldLength - newLength);\r\n        this.setCursorAt(selectionStart);\r\n    };\r\n    Object.defineProperty(InputManager.prototype, \"canInputMoreNumbers\", {\r\n        get: function () {\r\n            var haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\r\n            var selectionStart = this.inputSelection.selectionStart;\r\n            var selectionEnd = this.inputSelection.selectionEnd;\r\n            var haveNumberSelected = (selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/)) ? true : false;\r\n            var startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\r\n            return haventReachedMaxLength || haveNumberSelected || startWithZero;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InputManager.prototype, \"inputSelection\", {\r\n        get: function () {\r\n            var selectionStart = 0;\r\n            var selectionEnd = 0;\r\n            if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\r\n                selectionStart = this.htmlInputElement.selectionStart;\r\n                selectionEnd = this.htmlInputElement.selectionEnd;\r\n            }\r\n            else {\r\n                var range = document.getSelection().baseNode;\r\n                if (range && range.firstChild == this.htmlInputElement) {\r\n                    var lenght = this.htmlInputElement.value.length;\r\n                    var normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\r\n                    var startRange = this.htmlInputElement.createTextRange();\r\n                    var endRange = this.htmlInputElement.createTextRange();\r\n                    endRange.collapse(false);\r\n                    if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\r\n                        selectionStart = selectionEnd = lenght;\r\n                    }\r\n                    else {\r\n                        selectionStart = -startRange.moveStart(\"character\", -lenght);\r\n                        selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\r\n                        if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\r\n                            selectionEnd = lenght;\r\n                        }\r\n                        else {\r\n                            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\r\n                            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                selectionStart: selectionStart,\r\n                selectionEnd: selectionEnd\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InputManager.prototype, \"rawValue\", {\r\n        get: function () {\r\n            return this.htmlInputElement && this.htmlInputElement.value;\r\n        },\r\n        set: function (value) {\r\n            this._storedRawValue = value;\r\n            if (this.htmlInputElement) {\r\n                this.htmlInputElement.value = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InputManager.prototype, \"storedRawValue\", {\r\n        get: function () {\r\n            return this._storedRawValue;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return InputManager;\r\n}());\r\nexports.InputManager = InputManager;\r\n",null]}