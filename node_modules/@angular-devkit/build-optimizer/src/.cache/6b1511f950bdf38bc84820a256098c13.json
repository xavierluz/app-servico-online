{"remainingRequest":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\ng2-currency-mask\\src\\input.handler.js","dependencies":[{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\ng2-currency-mask\\src\\input.handler.js","mtime":1521219393000},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529519366463},{"path":"E:\\Xavier\\Desenvolvimento\\Angular\\projeto\\serviço\\servico-online\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar input_service_1 = require(\"./input.service\");\r\nvar InputHandler = /*@__PURE__*/ (function () {\r\n    function InputHandler(htmlInputElement, options) {\r\n        this.inputService = new input_service_1.InputService(htmlInputElement, options);\r\n        this.htmlInputElement = htmlInputElement;\r\n    }\r\n    InputHandler.prototype.handleClick = function (event, chromeAndroid) {\r\n        var selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\r\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\r\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\r\n            this.inputService.fixCursorPosition(chromeAndroid);\r\n        }\r\n    };\r\n    InputHandler.prototype.handleCut = function (event) {\r\n        var _this = this;\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n        setTimeout(function () {\r\n            _this.inputService.updateFieldValue();\r\n            _this.setValue(_this.inputService.value);\r\n            _this.onModelChange(_this.inputService.value);\r\n        }, 0);\r\n    };\r\n    InputHandler.prototype.handleInput = function (event) {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n        var keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\r\n        var rawValueLength = this.inputService.rawValue.length;\r\n        var rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\r\n        var rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\r\n        var storedRawValueLength = this.inputService.storedRawValue.length;\r\n        this.inputService.rawValue = this.inputService.storedRawValue;\r\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\r\n            this.setCursorPosition(event);\r\n            return;\r\n        }\r\n        if (rawValueLength < storedRawValueLength) {\r\n            if (this.inputService.value != 0) {\r\n                this.inputService.removeNumber(8);\r\n            }\r\n            else {\r\n                this.setValue(null);\r\n            }\r\n        }\r\n        if (rawValueLength > storedRawValueLength) {\r\n            switch (keyCode) {\r\n                case 43:\r\n                    this.inputService.changeToPositive();\r\n                    break;\r\n                case 45:\r\n                    this.inputService.changeToNegative();\r\n                    break;\r\n                default:\r\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\r\n                        return;\r\n                    }\r\n                    this.inputService.addNumber(keyCode);\r\n            }\r\n        }\r\n        this.setCursorPosition(event);\r\n        this.onModelChange(this.inputService.value);\r\n    };\r\n    InputHandler.prototype.handleKeydown = function (event) {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n        var keyCode = event.which || event.charCode || event.keyCode;\r\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\r\n            event.preventDefault();\r\n            var selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\r\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\r\n                this.setValue(null);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\r\n                this.inputService.removeNumber(keyCode);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\r\n                this.inputService.removeNumber(keyCode);\r\n                this.onModelChange(this.inputService.value);\r\n            }\r\n        }\r\n    };\r\n    InputHandler.prototype.handleKeypress = function (event) {\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n        var keyCode = event.which || event.charCode || event.keyCode;\r\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\r\n            return;\r\n        }\r\n        switch (keyCode) {\r\n            case 43:\r\n                this.inputService.changeToPositive();\r\n                break;\r\n            case 45:\r\n                this.inputService.changeToNegative();\r\n                break;\r\n            default:\r\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\r\n                    this.inputService.addNumber(keyCode);\r\n                }\r\n        }\r\n        event.preventDefault();\r\n        this.onModelChange(this.inputService.value);\r\n    };\r\n    InputHandler.prototype.handleKeyup = function (event) {\r\n        this.inputService.fixCursorPosition();\r\n    };\r\n    InputHandler.prototype.handlePaste = function (event) {\r\n        var _this = this;\r\n        if (this.isReadOnly()) {\r\n            return;\r\n        }\r\n        setTimeout(function () {\r\n            _this.inputService.updateFieldValue();\r\n            _this.setValue(_this.inputService.value);\r\n            _this.onModelChange(_this.inputService.value);\r\n        }, 1);\r\n    };\r\n    InputHandler.prototype.updateOptions = function (options) {\r\n        this.inputService.updateOptions(options);\r\n    };\r\n    InputHandler.prototype.getOnModelChange = function () {\r\n        return this.onModelChange;\r\n    };\r\n    InputHandler.prototype.setOnModelChange = function (callbackFunction) {\r\n        this.onModelChange = callbackFunction;\r\n    };\r\n    InputHandler.prototype.getOnModelTouched = function () {\r\n        return this.onModelTouched;\r\n    };\r\n    InputHandler.prototype.setOnModelTouched = function (callbackFunction) {\r\n        this.onModelTouched = callbackFunction;\r\n    };\r\n    InputHandler.prototype.setValue = function (value) {\r\n        this.inputService.value = value;\r\n    };\r\n    InputHandler.prototype.getNewKeyCode = function (oldString, newString) {\r\n        if (oldString.length > newString.length) {\r\n            return null;\r\n        }\r\n        for (var x = 0; x < newString.length; x++) {\r\n            if (oldString.length == x || oldString[x] != newString[x]) {\r\n                return newString.charCodeAt(x);\r\n            }\r\n        }\r\n    };\r\n    InputHandler.prototype.isArrowEndHomeKeyInFirefox = function (event) {\r\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    InputHandler.prototype.isReadOnly = function () {\r\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\r\n    };\r\n    InputHandler.prototype.setCursorPosition = function (event) {\r\n        var rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\r\n        setTimeout(function () {\r\n            event.target.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\r\n        }, 0);\r\n    };\r\n    return InputHandler;\r\n}());\r\nexports.InputHandler = InputHandler;\r\n",null]}